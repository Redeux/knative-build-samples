apiVersion: build.knative.dev/v1alpha1
kind: BuildTemplate
metadata:
  name: java8-buildah
spec:
  parameters:
    - name: JAVA_APP_BUILDER_IMAGE
      description: The builder image used to build the java application
      default: docker.io/maven:3.6-jdk-8-alpine
    - name: JAVA_APP_NAME
      description: The jar file name of the build artifact
      default: test
    - name: BUILDER_IMAGE
      description: The builder image to build the OCI container. Switch this to 'myproject/buildah', for example, if you built you own Buildah image.
      default: quay.io/mickcos/buildah
    - name: IMAGE_NAME
      description: The name of the image to build and push, you can use %a for artifact id from pom.xml and %v for version from pom.xml and %g for group from pom.xml
      default: testing
    - name: CONTEXT_DIR
      description: The directory containing the app, relative to the source repository root
      default: .
    - name: CACHE
      description: The name of the volume for caching Maven artifacts
      default: empty-dir-volume
    - name: DESTINATION_REGISTRY
      description: The registry where resulting image is pushed
      default: docker-registry.default.svc:5000/myproject

  steps:
    - name: build-app
      image: ${JAVA_APP_BUILDER_IMAGE}
      args:
        - mvn
        - package
        - -Duser.home=/builder/home
        - -sconfiguration/settings.xml
      workingDir: /workspace/${CONTEXT_DIR}
      volumeMounts:
        - name: ${CACHE}
          mountPath: /builder/home/.m2
          subPath: m2-cache
    - name: build-image
      image: ${BUILDER_IMAGE}
      workingDir: /workspace/${CONTEXT_DIR}
      args: ["bud", "-tmyproject/${IMAGE_NAME}", "."]
      env:
      - name: CONTEXT_DIR
        value: "${CONTEXT_DIR}"
      - name: IMAGE_NAME
        value: "${IMAGE_NAME}"
      - name: JAVA_APP_NAME
        value: "${JAVA_APP_NAME}"
      - name: DESTINATION_REGISTRY
        value: "${DESTINATION_REGISTRY}"
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            fieldPath: metadata.namespace
      volumeMounts:
         - name: varlibcontainers
           mountPath: /var/lib/containers
    - name: push-image
      image: ${BUILDER_IMAGE}
      args: ["push", "--authfile=/reg/.dockercfg", "--tls-verify=false", "localhost/myproject/${IMAGE_NAME}", "${DESTINATION_REGISTRY}/${IMAGE_NAME}"]
      volumeMounts:
         - name: varlibcontainers
           mountPath: /var/lib/containers
         - name: registry-credentials
           mountPath: /reg
  volumes:
    - name: varlibcontainers
      emptyDir: {}
    - name: registry-credentials
      secret:
        secretName: builder-dockercfg-xxxxx
